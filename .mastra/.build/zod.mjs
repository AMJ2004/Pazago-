import { B as BRAND, D as DIRTY, E as EMPTY_PATH, I as INVALID, N as NEVER, O as OK, P as ParseStatus, g as ZodType, h as ZodAny, j as ZodArray, k as ZodBigInt, m as ZodBoolean, p as ZodBranded, q as ZodCatch, t as ZodDate, v as ZodDefault, w as ZodDiscriminatedUnion, x as ZodEffects, y as ZodEnum, z as ZodError, Z as ZodFirstPartyTypeKind, A as ZodFunction, C as ZodIntersection, F as ZodIssueCode, G as ZodLazy, H as ZodLiteral, J as ZodMap, K as ZodNaN, L as ZodNativeEnum, M as ZodNever, Q as ZodNull, R as ZodNullable, S as ZodNumber, T as ZodObject, U as ZodOptional, V as ZodParsedType, W as ZodPipeline, X as ZodPromise, Y as ZodReadonly, _ as ZodRecord, $ as ZodSet, a0 as ZodString, a1 as ZodSymbol, a2 as ZodTuple, a3 as ZodUndefined, a4 as ZodUnion, a5 as ZodUnknown, a6 as ZodVoid, a7 as addIssueToContext, c as anyType, a as arrayType, a8 as bigIntType, b as booleanType, a9 as coerce, f as custom, aa as dateType, ab as datetimeRegex, ac as errorMap, d as discriminatedUnionType, ad as effectsType, e as enumType, ae as functionType, af as getErrorMap, ag as getParsedType, i as instanceOfType, ah as intersectionType, ai as isAborted, aj as isAsync, ak as isDirty, al as isValid, am as late, an as lazyType, l as literalType, ao as makeIssue, ap as mapType, aq as nanType, ar as nativeEnumType, as as neverType, at as nullType, au as nullableType, n as numberType, o as objectType, av as objectUtil, aw as oboolean, ax as onumber, ay as optionalType, az as ostring, aA as pipelineType, aB as preprocessType, aC as promiseType, aD as quotelessJson, r as recordType, aE as setType, aF as setErrorMap, aG as strictObjectType, s as stringType, aH as symbolType, aI as tupleType, aJ as undefinedType, u as unionType, aK as unknownType, aL as util, aM as voidType } from './v3.mjs';

var z = /*#__PURE__*/Object.freeze({
	__proto__: null,
	BRAND: BRAND,
	DIRTY: DIRTY,
	EMPTY_PATH: EMPTY_PATH,
	INVALID: INVALID,
	NEVER: NEVER,
	OK: OK,
	ParseStatus: ParseStatus,
	Schema: ZodType,
	ZodAny: ZodAny,
	ZodArray: ZodArray,
	ZodBigInt: ZodBigInt,
	ZodBoolean: ZodBoolean,
	ZodBranded: ZodBranded,
	ZodCatch: ZodCatch,
	ZodDate: ZodDate,
	ZodDefault: ZodDefault,
	ZodDiscriminatedUnion: ZodDiscriminatedUnion,
	ZodEffects: ZodEffects,
	ZodEnum: ZodEnum,
	ZodError: ZodError,
	get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
	ZodFunction: ZodFunction,
	ZodIntersection: ZodIntersection,
	ZodIssueCode: ZodIssueCode,
	ZodLazy: ZodLazy,
	ZodLiteral: ZodLiteral,
	ZodMap: ZodMap,
	ZodNaN: ZodNaN,
	ZodNativeEnum: ZodNativeEnum,
	ZodNever: ZodNever,
	ZodNull: ZodNull,
	ZodNullable: ZodNullable,
	ZodNumber: ZodNumber,
	ZodObject: ZodObject,
	ZodOptional: ZodOptional,
	ZodParsedType: ZodParsedType,
	ZodPipeline: ZodPipeline,
	ZodPromise: ZodPromise,
	ZodReadonly: ZodReadonly,
	ZodRecord: ZodRecord,
	ZodSchema: ZodType,
	ZodSet: ZodSet,
	ZodString: ZodString,
	ZodSymbol: ZodSymbol,
	ZodTransformer: ZodEffects,
	ZodTuple: ZodTuple,
	ZodType: ZodType,
	ZodUndefined: ZodUndefined,
	ZodUnion: ZodUnion,
	ZodUnknown: ZodUnknown,
	ZodVoid: ZodVoid,
	addIssueToContext: addIssueToContext,
	any: anyType,
	array: arrayType,
	bigint: bigIntType,
	boolean: booleanType,
	coerce: coerce,
	custom: custom,
	date: dateType,
	datetimeRegex: datetimeRegex,
	defaultErrorMap: errorMap,
	discriminatedUnion: discriminatedUnionType,
	effect: effectsType,
	enum: enumType,
	function: functionType,
	getErrorMap: getErrorMap,
	getParsedType: getParsedType,
	instanceof: instanceOfType,
	intersection: intersectionType,
	isAborted: isAborted,
	isAsync: isAsync,
	isDirty: isDirty,
	isValid: isValid,
	late: late,
	lazy: lazyType,
	literal: literalType,
	makeIssue: makeIssue,
	map: mapType,
	nan: nanType,
	nativeEnum: nativeEnumType,
	never: neverType,
	null: nullType,
	nullable: nullableType,
	number: numberType,
	object: objectType,
	get objectUtil () { return objectUtil; },
	oboolean: oboolean,
	onumber: onumber,
	optional: optionalType,
	ostring: ostring,
	pipeline: pipelineType,
	preprocess: preprocessType,
	promise: promiseType,
	quotelessJson: quotelessJson,
	record: recordType,
	set: setType,
	setErrorMap: setErrorMap,
	strictObject: strictObjectType,
	string: stringType,
	symbol: symbolType,
	transformer: effectsType,
	tuple: tupleType,
	undefined: undefinedType,
	union: unionType,
	unknown: unknownType,
	get util () { return util; },
	void: voidType
});

export { ZodFirstPartyTypeKind, ZodObject, z };
